TIMETABLE

/* The following class is composed of a set of unit tests made on functions used 
 * in the Scheme TIMETABLE.
 */
scheme testTIMETABLE =
extend TIMETABLE with 
	class	
		value
			--Example of the project description for a well defined net
			basicExample : Unit -> Net
			basicExample() is 
				let
				a = mk_Stop("A", 2),
				b = mk_Stop("B", 3),
				c = mk_Stop("C", 2),
				d = mk_Stop("D", 2),
				c1 = mk_Connection(3, 10, 2, {a, b}),
				c2 = mk_Connection(3, 12, 4, {b, c}),
				c3 = mk_Connection(2, 7, 4, {b, d})			
			in 
				mk_Net({a, b, c, d}, {c1, c2, c3})
			end,	
		
			--Example of the project description for a well defined net
			basicTimetable : Unit -> TimeTable
			basicTimetable() is 
				let
					--Creating the time table for tram 1
					trip_one = mk_Trip("A", 0, 1),
					trip_two = mk_Trip("B", 12, 14),
					trip_three = mk_Trip("C", 28, 32),
					trip_four = mk_Trip("B", 46, 48),
					trip_five = mk_Trip("A", 59, 60),
					trips = {trip_one, trip_two, trip_three, trip_four, trip_five},
					plan_one = mk_Plan("tram1", trips),
					
					--Creating the time table for tram 2
					trip_a = mk_Trip("D", 0, 2),
					trip_b = mk_Trip("B", 11, 13),
					trip_c = mk_Trip("A", 28, 32),
					trip_d = mk_Trip("B", 47, 50),
					trip_e = mk_Trip("D", 58, 60),
					trips_bis = {trip_a, trip_b, trip_c, trip_d, trip_e},
					plan_two = mk_Plan("tram1", trips_bis)
				in 
					{plan_one, plan_two}
				end	
					
		test_case
		
			/* Adding a plan for a tram to time table, it should
				return true because we have to have 2 elements after adding*/
			
			[addTram_1] 
				let
					trId = "TramB",
					tt = {mk_Plan("TramB",{mk_Trip("A",0,2)})}			
				in 
					card addTram(trId, tt) = 2
				end,
			
			/* Should return true because TramB is in time table */	
			
			[isIn_1] 
				let
					tt = {mk_Plan("TramB",{mk_Trip("A",0,2)})}			
				in 
					isIn("TramB", tt) = true
				end,
				
			/* Should return false because TramB is not in time table */
			
			[isIn_2] 
				let
					tt = {mk_Plan("TramB",{mk_Trip("A",0,2)})}			
				in 
					isIn("TramA", tt) = false
				end,
			
			/* Should return true because becuase we want to get plan2 */
			
			[getPlanByTramId_1] 
				let
					plan1 = mk_Plan("TramA",{mk_Trip("A",0,2)}),
					plan2 = mk_Plan("TramB",{mk_Trip("B",1,5)}),
					tt = {plan1, plan2}	
				in 
					getPlanByTramId("TramB", tt) = plan2
				end,
			
			/* Should return true because becuase we want to get plan2 */
			
			[getPlanByTramId_2] 
				let
					plan1 = mk_Plan("TramA",{mk_Trip("A",0,2)}),
					plan2 = mk_Plan("TramB",{mk_Trip("B",1,5)}),
					tt = {plan1, plan2}			
				in 
					getPlanByTramId("TramC", tt) 
				end,
					
			/* Should return true because becuase we add stop to plan
				and we should have two trip in the plan after adding*/
			[addStop_1] 
				let
					trId="TramA", 
					sId="B", 
					at= 12, 
					dt= 24, 
					tt = {mk_Plan("TramA",{mk_Trip("A",0,2)})}			
				in 
					addStop(trId, sId, at, dt, tt) = {mk_Plan("TramA",{mk_Trip("B",12,24),mk_Trip("A",0,2)})}
				end,
				
			/* Should return true because becuase we added a stop which
			is already exist in plan */
			
			[addStop_2] 
				let
					trId="TramA", 
					sId="C", 
					at= 12, 
					dt= 24, 
					tt = {mk_Plan("TramA",{mk_Trip("C",12,24)})}			
				in 
					addStop(trId, sId, at, dt, tt)= {mk_Plan("TramA",{mk_Trip("C",12,24)})}
				end,
			
			/* Should return true, since the stop C is in the time table */
				
			[stopIsIn_1]
				stopIsIn("C", basicTimetable()) = true,
				
			/* Should return false, since the stop A is not in the time table */
			
			[stopIsIn_2]
				stopIsIn("E", basicTimetable()) = false,

			/* Should return true because arrival time and 
				departure time are different */
			
			[isADTimeAreDifferent_1] 
				let
					
					trip = mk_Trip("C",12,24)			
				in 
					isADTimeAreDifferent(trip)= true
				end,
			
			/* Should return false because arrival time and 
				departure time are same */	
			
			[isADTimeAreDifferent_2] 
				let
					 
					trip = mk_Trip("C",12,12)			
				in 
					isADTimeAreDifferent(trip)= false
				end,
			
			/* Should return true because arrival time is before 
				departure time */		
				
			[isATimeBeforeDTime_1] 
				let	
					trip = mk_Trip("C",12,24)			
				in 
					isATimeBeforeDTime(trip)= true
				end,
			
			/* Should return false because departure time is before 
				arrival time */
			
			[isATimeBeforeDTime_2] 
				let	
					trip = mk_Trip("C",24,12)			
				in 
					isATimeBeforeDTime(trip)= false
				end,
			
			/* Should return true because values are between 0 and 60 */
			
			[areValuesinRange_1] 
				let
					plan = mk_Plan("TramA",{mk_Trip("A",0,2)})			
				in 
					areValuesinRange(plan) = true
				end,
			
			/* Should return true because values are not between 0 and 60 */	
			
			[areValuesinRange_2] 
				let
					plan = mk_Plan("TramA",{mk_Trip("A",61,62), mk_Trip("A",0,2)})			
				in 
					areValuesinRange(plan) = false
				end,
				
						/* Should return true since all stops defined in trips are also defined in the net */
			
			[requirementTen_1]
				requirementTen(basicTimetable(), basicExample()) = true,
				
			/* Should return false since stop E is not defined in the net */
			
			[requirementTen_2]
				let
					plan1 = mk_Plan("TramA",{mk_Trip("A",0,2)}),
					plan2 = mk_Plan("TramB",{mk_Trip("E",1,5)}),
					t = {plan1, plan2}			
				in 
					requirementTen(t, basicExample()) = false
				end,
			
			/* Should return true since all stops of the net are used in the time table */
			
			[requirementEleven_1]
				requirementEleven(basicTimetable(), basicExample()) = true,
			
			/* Should return true since the stop D of the net is not used in the time table */
			
			[requirementEleven_2]
				let
					plan1 = mk_Plan("TramA",{mk_Trip("A",0,2), mk_Trip("C",1,5)}),
					plan2 = mk_Plan("TramB",{mk_Trip("B",1,5)}),
					t = {plan1, plan2}			
				in
					requirementEleven(t, basicExample()) = false
				end
end