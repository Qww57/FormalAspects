NET
scheme TIMETABLE = extend NET with
class
	type /* Time table type */
	
    	TimeTable = Plan-set,
    	
    	/* Auxiliary types */
    	
    	Plan:: tramId : TramId
	    	   trips : Trip-set <-> new_trips,
    
    	Trip:: stationId :StopId 
	   		   arrivalTime : Time
	   		   departureTime: Time,
	   		
	   	/* Simple predefined types */

    	TramId = Text -- tram names

    value /* generators */
    
      	-- the empty timetable
    	-- empty: TimeTable = TimeTable-set =,

      	-- add to a time table an empty plan for a new tram
      	addTram: TramId >< TimeTable -> TimeTable
      	addTram(trId, tt) is
	    	 {mk_Plan(trId, {})} union tt,

      	-- add a stop with arrival time and departure time to the plan for a given tram
      	addStop: TramId >< StopId >< Time >< Time >< TimeTable -> TimeTable
      	addStop(trId, sId, at, dt, tt) is
		if isIn(trId, tt)
	    then let 
				plan = getPlanByTramId(trId, tt),
				tt = tt \ {plan} 
			in
				{new_trips({mk_Trip(sId, at, dt)} union trips(plan), plan)} union tt 
			end
		else {mk_Plan(trId, {mk_Trip(sId, at, dt)})} union tt
		end
		 
	value /* observers */
     
     	-- check whether a tram with a given name exists in a given time table
     	isIn : TramId >< TimeTable -> Bool
	 	isIn(trId, tt) is
			(exists plan : Plan :- plan isin tt /\ tramId(plan) = trId),

		-- check whether a stop with a given name exists in a given time table
    	stopIsIn : StopId >< TimeTable -> Bool
    	stopIsIn(id, t) is
    		(exists p : Plan :- p isin t /\
    			(exists t : Trip :- t isin trips(p) /\ stationId(t) = id)),

		/* Auxiliary functions for the Observers and Generators */
	
		getPlanByTramId: TramId >< TimeTable -> Plan
		getPlanByTramId(trId, tt) is
			let 
				head = hd tt,
	    		tail = tt \ {head} 		
	    	in
	    		if trId = tramId(head)
	    		then head 
	    		else getPlanByTramId(trId, tail)
	    		end
			end

 	 value /* predicates to check time tables */   
   		
   		--isWellformed : TimeTable >< Net -> Bool
     	--isWellformed(t, n) is ...,
			
		-- 1) Arrival time and departure time of the same trip cannot be equals		
		isADTimeAreDifferent: Trip -> Bool
		isADTimeAreDifferent(trip) is
				if( arrivalTime(trip) ~= departureTime(trip))
				then true
				else false
			end,				
		
		-- 2) The departure time  shouldnâ€™t be before  arrival time
		isATimeBeforeDTime: Trip -> Bool
		isATimeBeforeDTime(trip) is
				if( arrivalTime(trip) < departureTime(trip))
				then true
				else false
			end,
			
		-- 3) All values should be between zero and 60
		areValuesinRange: TimeTable -> Bool
		areValuesinRange(tt) is
			~(exists plan : Plan :- plan isin tt /\
				(exists trip : Trip :- trip isin trips(plan) /\ 
					(arrivalTime(trip) > 60 \/ departureTime(trip) > 60))
			 ),
			  
		-- 4) There should be only one plan per tram	  
		onlyOnePlan: TramId >< TimeTable -> Bool
		onlyOnePlan(trId, tt) is
			~(exists p1 : Plan :- p1 isin tt /\ tramId(p1) = trId /\
				(exists p2: Plan :- p2 isin tt /\ p1 ~=p2 /\ tramId(p2) = tramId(p1))
			 ),
		/*
		-- 5) 
		consistentTramAndTable: StopId >< StopId >< Net ><TimeTable -> Bool
		consistentTramAndTable(s1, s2, net, tt) is
			(exists plan : Plan :- plan isin tt /\ arrivalTime(trip2) >  
		*/
    	-- 10) All stops of the time table should be defined in the net
     	requirementTen : TimeTable >< Net -> Bool 
     	requirementTen(t, n) is
     		~(exists p : Plan :- p isin t /\ stopDefinition(p, n)),
     	
     	-- All stops of the trips of the plan are defined in the net 
     	stopDefinition : Plan >< Net -> Bool
     	stopDefinition(p, n) is 
     		~(exists t : Trip :- t isin trips(p) /\ isIn(stationId(t), n)),
     		
     	-- 11) All stops of the net are used at least once in the time table
     	requirementEleven : TimeTable >< Net -> Bool
     	requirementEleven(t, n) is
     		~(exists s : Stop :- s isin Stops(n) /\ ~stopIsIn(stopId(s), t)) 
end 