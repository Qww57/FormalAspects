ColouringBasics

/* This class extends the ColouringBasics in order to provide a method returning a correct colouring for a given relation.
 *
 * TODO: add something to avoid having duplicates 
 *
 * This class is composed of:
 * 	- auxiliary functions for the small tasks
 *  - treatment functions which are used recursively on Pieces, Couples of Pieces and Relations
 *  - the main function col
 */

scheme ColouringEx =
extend ColouringBasics with 
	class
		value
		
		/* Auxiliary functions */
			
		/* This functions checks if the piece can be added or not in the colour being tested.
		 * We are checking if there is a neighbour of the piece in the colour and if the piece is already in the colour.
		 *
		 * params
		 *		cn1 - piece we want to check
		 * 		r - relation defining neighbourhood relations
		 *		colour - current colour we want to test
		 *
		 * returns 
		 * 		true - if Piece can be added to the colour
		 * 		false - if Piece cannot be added to the colour
		 */ 
		canAddPieceToColour : Piece >< Relation >< Colour -> Bool
		canAddPieceToColour(cn1, r, colour) is
			~((exists p1 : Piece :- p1 isin colour /\ areNb(p1, cn1, r))) /\ ~(cn1 isin colour), 
									
		/* This function checks if the piece can be added to on of the existing colours of the colouring
		 *
		 * params
		 *		cn1 - piece we want to check
		 * 		r - relation defining neighbourhood relations
		 *		colouring - Colouring to test
		 *
		 * returns 
		 * 		true - if the piece can be added in a color of the colouring
		 * 		FALSE - if the piece cannot be added to the colour of the colouring
		 */ 
		canAddPieceToExistingColours : Piece >< Relation >< Colouring -> Bool
		canAddPieceToExistingColours(cn1, r, colouring) is
			(exists colour : Colour :- colour isin colouring /\ canAddPieceToColour(cn1, r, colour)),
	
		/* This function is used to add a colour to a new Colour (i.e. Piece-set)
		 *
		 * params
		 *		cn1 - piece to add to the colour
		 * 		r - relation defining neighbourhood relations
		 *		colour - current colour we want to add the piece
		 *
		 * returns
		 * 		colour - colour in the parameters with potentially the new piece 
		 */
		addPieceToColour : Piece >< Relation >< Colour -> Colour
		addPieceToColour(cn1, r, colour) is 
			if canAddPieceToColour(cn1, r, colour) 
			then colour union {cn1}
			else colour
			end,
		
		
		/* Treatment functions */
		
		/* This fonction shows the treatment made on a Piece that is added to the Colouring (.i.e. {Piece-set}-set)
		 *
		 * params
		 *		cn1 - piece to add to the colour
		 * 		r - relation defining neighbourhood relations
		 *		colouring - current colouring where we want to add the piece
		 *
		 * returns
		 * 		colouring - colouring from the input with potentially a new Piece 
		 */
		treatmentOnPiece : Piece >< Relation >< Colouring -> Colouring
		treatmentOnPiece(cn1, r, colouring) is 
			if canAddPieceToExistingColours(cn1, r, colouring) 
			then {addPieceToColour(cn1, r, colour) |  colour : Colour :- colour isin colouring}
			else elseCondition(cn1, colouring) 
			end,
	
		
		/* This function extends the treatmentOnPiece function in the case of a Piece that cannot be added to an existing Colour (i.e. Piece-set)
		 * This Piece should so either not be added at all (if the Piece is already in the Colouring), or should be added in a new Colour.
		 *
		 * params
		 *		cn1 - Piece to add to the colouring
		 *		colouring - Current colouring where we want to add the piece
		 *
		 * returns
		 * 		colouring - Colouring from the input with potentially a new Piece 
		 */
		elseCondition : Piece >< Colouring -> Colouring
		elseCondition(cn1, colouring) is
			if ~(exists colour : Colour :- colour isin colouring /\ cn1 isin colour)
			then colouring union {{cn1}} 
			else colouring
			end,
			
		/* This fonction shows the treatment made on a couple of Pieces that should be added to the Colouring (.i.e. {Piece-set}-set)
		 * This fonction is recursive and calls treatmentOnPiece.
		 *
		 * params
		 *		couple - couple of Pieces to add to the colouring
		 *		r - relation defining the neighborhood relationships
		 *		colouring - Current colouring where the couple of Pieces should be added
		 *
		 * returns
		 * 		colouring - Colouring from the input with potentially a new couple of Piece 
		 */		
		treatmentOnCouple : (Piece >< Piece) >< Relation >< Colouring -> Colouring
		treatmentOnCouple(couple, r, colouring) is
			let (p1, p2) = couple
			in treatmentOnPiece(p1, r, treatmentOnPiece(p2, r, colouring))
			end,
					
		/* This fonction shows the recursive treatment made on a relation of Pieces that should be added to the Colouring (.i.e. {Piece-set}-set)
		 * First, we split the relation in a couple of Pieces and a tail using the hd method.
		 * Then, we and apply the treatmentOnCouple on this couple.
		 * Then, we apply recursively the treatmentOnRelation method on the remaining part of the relation.
		 * This is done recursively until the relationSet is empty.
		 * 
		 * params
		 *		relationSet - relation used to define the set of pieces we are working on
		 *		r - relation defining the neighborhood relationships
		 * 		colouring - Current colouring where the Pieces should be added
		 *
		 * returns 
		 * 		colouring - Colouring from the input 
		 */		
		treatmentOnRelation : Relation >< Relation >< Colouring -> Colouring 
		treatmentOnRelation(relationSet, r, colouring) is 
			if relationSet ~= {}
			then let head = hd relationSet,
					tail = relationSet \ {head}
				in treatmentOnRelation(tail, r, treatmentOnCouple(head, r, colouring))
				end
			else colouring 
			end,
			
			
		/* Main function */
		
		tmpColour : Colouring = {{}},
						
		/* This function returns a correct colouring for the relation in input. 
		 * This function is calling: treatmentOnRelation and starting the use of recursive functions. 
		 *
		 * params
		 * 		r - relation defining neighbourhood relations of piece we want to colour
		 *
		 * returns
		 * 		Colouring - colouring considering correctly the neighbourhood relations
		 */
		col : Relation -~-> Colouring	
		col(r) is 
			treatmentOnRelation(r, r, tmpColour) 
		pre isRelation(r) 
	
end