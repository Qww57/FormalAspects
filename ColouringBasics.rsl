scheme  ColouringBasics =
class
	type 
		Piece = Text,
		Relation = (Piece >< Piece)-set,
		Colour = Piece-set,
		Colouring = Colour-set
	    
	value 		
		/* The point is to check if a piece is in the colouring (i.e. (Piece-set)-set)
		 *
		 * params
		 *		cn1 - piece we want to check
		 *		colouring - colouring which cotaining colours (Piece-set)
		 *
		 * returns 
		 * 		true - if the piece is in the colour set
		 * 		false - if the piece is not in the colour set	
		 */		 
		 isInColouring : Piece >< Colouring -> Bool
		 isInColouring(cn1, colouring) is 		 	
		 	(exists colour : Colour :- colour isin colouring /\ (exists p1 : Piece :- p1 isin colour /\ (p1 = cn1))), 		
		
		/* Test if a couple in the relation has the same colouring
		 *
		 * params
		 *		cn1 - first piece we want to test
		 *		cn2 - second piece we want to test
		 *		cols - colouring which contains the colours
		 *
		 * returns 
		 * 		true - if Piece already in colour set
		 * 		false - if Piece not in color set		
		 */
		isSameColour : Piece >< Piece >< Colouring -> Bool
   		isSameColour(cn1, cn2, cols) is 
   			(exists colour1 : Colour :- colour1 isin cols /\ cn1 isin colour1 /\ 
   				(exists colour2 : Colour :- colour2 isin cols /\ cn2 isin colour2 /\ (colour1 = colour2))),		 	
		
		/* Defining that for all pieces (p1, p2) defining couples in a relation, we have p1 different from p2.
		 * The point is to check that the relation doesn't have any couple defined with the two times the same piece.
		 * For instance: {p1, p1}
		 *
		 * params
		 *		r - relation we want to test
		 *
		 * returns 
		 * 		true - if the relation is well-formated
		 * 		false - if the relation is not well-formated
		 */
		isRelation : Relation -> Bool
		isRelation(r) is 
			(all p1 : Piece :- p1 isin {let (p1, p2) = e in p1 end | e : Piece >< Piece :- e isin r} =>
				(all p2 : Piece :- p2 isin {let (p1, p2) = e in p2 end | e : Piece >< Piece :- e isin r} =>
					((p1, p2) isin r => (p1 ~= p2))
				)
			),	
		
		/* Defining two pieces p1 and p2 as parts of a couple which belongs to r, 
		 * then, we have the implication that if cn1 and cn2 are neighbour, they should be equal to p1 and p2.
		 *
		 * The point is to check that it exists (or not) two pieces (p1, p2) from the relation which are neighbours.
		 * Then, we check if these pieces are equals cn1 and cn2.
		 *
		 * params
		 *		cn1 - first piece we want to check
		 * 		cn2 - second piece we want to check
		 *		r - relation where are all the neighborhoods relation are defined
		 *
		 * returns 
		 * 		true - if pieces are neighbors according to the relation
		 * 		false - if pieces are not neighbors according to the relation
		 */
		areNb : Piece >< Piece >< Relation -> Bool
		areNb(cn1, cn2, r) is 
			(exists (p1, p2) : Piece >< Piece :- (p1, p2) isin r /\ ((cn1 = p1 /\ cn2 = p2) \/ (cn1 = p2 /\ cn2 = p1)))
		pre isRelation(r), 		
   		
		/* A colouring is correct if:
		 * 		- all couples of neighbours have different colours
		 *		- all pieces of the relation are only once in the colouring 
		 *		  since one Piece can have only one colour
		 *		- all pieces of the relation are there once TODO
		 *
		 * params
		 *		cols - colouring used on the pieces
		 *		r - relation defining neighborhood relations
		 *
		 * returns 
		 * 		true - if colouring is done correctly
		 * 		false - if colouring is not done correctly
		 */ 
    	isCorrectColouring : Colouring >< Relation -> Bool
   		isCorrectColouring(cols, r) is 
   			neighborCondition(cols, r) /\ unicityCondition(cols, r) /\ exhaustivityCondition(cols, r)
   		pre isRelation(r), 
   		
   		/* Fonction used to check that all pieces of the relation are in colouring */
   		
   		exhaustivityCondition : Colouring >< Relation -> Bool
   		exhaustivityCondition(cols, r) is 
   			(all p1 : Piece :- p1 isin {let (p1, p2) = e in p1 end | e : Piece >< Piece :- e isin r} =>
				(all p2 : Piece :- p2 isin {let (p1, p2) = e in p2 end | e : Piece >< Piece :- e isin r} =>
					(exists col : Colour :- col isin cols /\ p1 isin col) /\ (exists col : Colour :- col isin cols /\ p2 isin col)
				)
			),
   		
   		/* Function used to check that neighbour pieces have different colours */
   		
   		neighborCondition : Colouring >< Relation -> Bool
   		neighborCondition(cols, r) is 
   			(all p1 : Piece :- p1 isin {let (p1, p2) = e in p1 end | e : Piece >< Piece :- e isin r} =>
				(all p2 : Piece :- p2 isin {let (p1, p2) = e in p2 end | e : Piece >< Piece :- e isin r} =>
					(areNb(p1, p2, r)) => ~isSameColour(p1, p2, cols) 
				)
			),
		
		/* Functions used for the unicity of each Piece from the relation in the colouring */
		
		/* Unicity is proved by showing that for all pieces P in the relation, it doesn't exist any couple of colours (c1, c2), 
		 * so that c1 and c2 are different and the piece P is in both of them.
		 */	
		unicityCondition : Colouring >< Relation -> Bool
   		unicityCondition(cols, r) is 
   			(all p1 : Piece :- p1 isin {let (p1, p2) = e in p1 end | e : Piece >< Piece :- e isin r} =>
				(all p2 : Piece :- p2 isin {let (p1, p2) = e in p2 end | e : Piece >< Piece :- e isin r} =>
					(unicityConditionInside(cols, p1) /\ unicityConditionInside(cols, p2))
				)
			),
		
		/* Function used to prove that the piece cn1 is only in one colour of the colouring.
		 */
		unicityConditionInside : Colouring >< Piece -> Bool
		unicityConditionInside(cols, cn1) is
			~(exists colour1 : Colour :- colour1 isin cols /\ cn1 isin colour1 /\ 
   				(exists colour2 : Colour :- colour2 isin cols /\ cn1 isin colour2 /\ (colour1 ~= colour2)))
   				
 end