ColouringEx

scheme testColouringExAuxiliaryFunctions =
extend ColouringEx with 
	class
		value
			P1 : Piece = "Piece 1",
			P2 : Piece = "Piece 2",
			P3 : Piece = "Piece 3",
			P4 : Piece = "Piece 4",
			P5 : Piece = "Piece 5",
			r : Relation = {(P1, P2), (P2,P3), (P3, P4)},
			r1 : Relation = {(P1, P2), (P2,P3), (P3, P4), (P1, P5)},
			c1 : Colour = {P2}, 
			c2 : Colour = {P3, P4},
			colouring : Colouring = {{P1, P3}, {P2}},
			colouring2 : Colouring = {{P1,P3}}		
				
		test_case 			
						
			/* canAddPieceToColour */
			
			[canAddPieceToColour] /* False because P2 is in c1 and is neighbour with P1 */
				canAddPieceToColour(P1, r, c1) = false,	
						
			[canAddPieceToColour2] /* False because P2 is in c1 */
				canAddPieceToColour(P2, r, c1) = false,		
					
			[canAddPieceToColour3] /* Because no neighbour of P1 in c2 and P1 not in c2 */
				canAddPieceToColour(P1, r, c2) = true,
				
			/* addPieceToColour */
				
			[addPieceToColour] /* Should return {P2} because P1 already has neighbour in c1*/
				addPieceToColour(P1, r, c1) = {P2},			
				
			[addPieceToColour2] /* Should return {P2} because P2 already in c1 */
				addPieceToColour(P2, r, c1) = {P2},		
			
			/* canAddPieceToOneColour */
				
			[canAddPieceToExistingColours] /* True because P4 can be added to P2's colour */
				canAddPieceToExistingColours(P4, r, colouring) = true,			
				
			[canAddPieceToExistingColours2] /* False because P2 cannot be with P1 and P3 */
				canAddPieceToExistingColours(P2, r, colouring2) = false,	
			
			/* treatmentOnPiece */
				
			[treatmentOnPiece] /* Should add P4 with P2 */
				treatmentOnPiece(P4, r, colouring) = {{P1, P3}, {P2, P4}},			
				
			[treatmentOnPiece2] /* Should not do anything since P2 is already inside */
				treatmentOnPiece(P2, r, colouring) = colouring,
				
			[treatmentOnPiece3] /* Should create a new colour for P2, colouring2 will be colouring */
				treatmentOnPiece(P2, r, colouring2) = colouring,
			
			[treatmentOnPiece4] /* Should not change anything */
				treatmentOnPiece(P3, r, {{P1, P3}, {P2, P4}}) = {{P1, P3}, {P2, P4}},
				
			/* treatmentOnCouple */
				
			[treatmentOnCouple] /* should add P4 and P5 into the colouring */
				treatmentOnCouple((P5, P4), r1, colouring),			
			
			[treatmentOnCouple1] /* Should P2 and P1 in two different colours */
				treatmentOnCouple((P1, P2), r, {{}}),			
			
			[treatmentOnCouple2]  /* Should add P3 with P1 */
				treatmentOnCouple((P2, P3), r, {{P1},{P2}}),
				
			[treatmentOnCouple3] /* Should add P4 into the colour of P2 */
				treatmentOnCouple((P3, P4), r, {{P1, P3},{P2}}),
								
			[colSet]
				col(r) 

end